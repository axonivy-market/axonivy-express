pipeline {
  agent {
    label 'linux'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  triggers {
    pollSCM 'H/15 * * * *'
  }

  stages {
    stage('build') {
      steps {
        script {
          builtModules = []
          docker.build('build-axonivy-express-module', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            def modules = ['axonivy-express']
            for (module in modules) {
              maven cmd: "clean install -f ${module}/pom.xml"
              builtModules.add(module)
            }
          }
        }
        archiveArtifacts artifacts: '*/target/*.iar', allowEmptyArchive: true
      }
    }

    stage('deploy') {
      steps {
        script {
          def buildPluginVersion = readMavenPom(file: 'axonivy-express/pom.xml').getProperties().getProperty("build.plugin.version")
          def engineUrl = 'http://' + getJenkinsMasterDomain() + ':8000'
          docker.build('deploy-modules-to-engine', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            for (module in builtModules) {
              maven cmd: "com.axonivy.ivy.ci:project-build-plugin:${buildPluginVersion}:deploy-to-engine -f ${module}/pom.xml -Divy.deploy.server.id=engine-cockpit -Divy.deploy.engine.app=Portal -Divy.deploy.method=HTTP -Divy.deploy.engine.url=${engineUrl} -Divy.test.engine=MODIFY_EXISTING -Divy.deploy.test.users=true"
            }
          }
        }
      }
    }
  }
}

def getJenkinsMasterDomain() {
  return env.BUILD_URL.split('/')[2].split(':')[0]
}